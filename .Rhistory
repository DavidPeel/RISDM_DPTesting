filenames <- paste0( system.file("extdata", package="RISDM"),
c("/GambaExample_sqrtACC_23Mar28.tif",
"/GambaExample_sqrtDEM_23Mar28.tif",
"/GambaExample_SMRZ_23Mar28.tif"))
covars <- stack( filenames)
names( covars) <- c("ACC","DEM","SMRZ")
print( colnames( coordinates( covars)))  #to see how things are labelled.
plot( covars)
gamba_PO <- readRDS( system.file("extdata", "Gamba_PO_23Mar28.RDS",
package="RISDM"))
gamba_PA <- readRDS( system.file("extdata", "Gamba_PA_23Mar28.RDS",
package="RISDM"))
str( gamba_PO)
str( gamba_PA)
my.mesh <- makeMesh( covars$DEM, max.n=c(1000, 350), dep.range=3, doPlot=FALSE)
checkMesh( my.mesh, my.mesh$hull, ras=covars$DEM)
#linear in SMRZ only
my.form <- ~0+SMRZ
#interacting between SMRZ and DEM
my.form <- ~0+SMRZ*DEM
#a B-spline regression basis with low degrees of freedom
my.form <- ~0+splines::bs(SMRZ, df=3)
#a(n orthogonal) polynomial in SMRZ and DEM
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)
#adding accessibility too (as per paper).
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)+acc
#intercept only == no heterogeneity in search effort (no sampling bias)
my.biasForm <- 1
#regression spline in acc
my.biasForm <- ~1+splines::bs( acc, df=3)
#linear in acc
my.biasForm <- ~1+acc
#observer differences as a sampling artefact
list( PO=NULL, PA=~1+observer)
#intercept only == no sampling artefact
#               == no heterogeneity within each data type
list( PO=NULL, PA=~1)
fm <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y")))
str( fm)
names( fm)
names( fm$mod)
names( fm$stack)
names( fm$data)
rm( covars, fm)
#You may wish to tidy your workspace.
rm( list=c(covars, fm, gamba_PA, gamba_PO, my.mesh, filenames, my.biasForm, my.form))
filenames <- paste0( system.file("extdata", package="RISDM"),
c("/GambaExample_sqrtACC_23Mar28.tif",
"/GambaExample_sqrtDEM_23Mar28.tif",
"/GambaExample_SMRZ_23Mar28.tif"))
covars <- stack( filenames)
names( covars) <- c("ACC","DEM","SMRZ")
print( colnames( coordinates( covars)))  #to see how things are labelled.
plot( covars)
gamba_PO <- readRDS( system.file("extdata", "Gamba_PO_23Mar28.RDS",
package="RISDM"))
gamba_PA <- readRDS( system.file("extdata", "Gamba_PA_23Mar28.RDS",
package="RISDM"))
str( gamba_PO)
str( gamba_PA)
my.mesh <- makeMesh( covars$DEM, max.n=c(1000, 350), dep.range=3, doPlot=FALSE)
checkMesh( my.mesh, my.mesh$hull, ras=covars$DEM)
my.mesh.bad <- makeMesh( covars$DEM, max.n=c(250, 30), dep.range=3, doPlot=FALSE)
checkMesh( my.mesh.bad, my.mesh$hull, ras=covars$DEM)
#linear in SMRZ only
my.form <- ~0+SMRZ
#interacting between SMRZ and DEM
my.form <- ~0+SMRZ*DEM
#a B-spline regression basis with low degrees of freedom
my.form <- ~0+splines::bs(SMRZ, df=3)
#a(n orthogonal) polynomial in SMRZ and DEM
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)
#adding accessibility too (as per paper).
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)+acc
#intercept only == no heterogeneity in search effort (no sampling bias)
my.biasForm <- 1
#regression spline in acc
my.biasForm <- ~1+splines::bs( acc, df=3)
#linear in acc
my.biasForm <- ~1+acc
#observer differences as a sampling artefact
list( PO=NULL, PA=~1+observer)
#intercept only == no sampling artefact
#               == no heterogeneity within each data type
list( PO=NULL, PA=~1)
fm <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y")))
#the very vague everything
my.control <- list( prior.mean=0, int.sd=1000, other.sd=1000)
#(much) tighter prior for effects
my.control <- list( prior.mean=0, int.sd=1000, other.sd=0.1)
#the default
my.control <- list( prior.mean=0, int.sd=1000, other.sd=10)
fm <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.noRand <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
addRandom=FALSE))
summary( fm)
plot( fm, covarRaster=covars, nFigRow=2, ask=FALSE)
plot( fm.noRand, covarRaster=covars, nFigRow=2, ask=FALSE)
#This is a mock-up only.
#You should use a much(!) larger value of S.
#You will probably want to choose a larger value of n.threads too.
fm$preds <- predict( fm, covarRaster=covars, S=50,
intercept.terms="PA_Intercept", n.threads=1)
plot( fm$preds$mean.field)
#Predicting probability too
fm$preds.probs <- predict( fm, covarRaster=covars,
S=50, intercept.terms="PA_Intercept", n.threads=1,
type="probability")
plot( fm$preds.probs$mean.field)
#You may wish to tidy your workspace.
rm( list=c(covars, fm, gamba_PA, gamba_PO, my.mesh, filenames,
my.biasForm, my.form, my.control, my.mesh, my.mesh.bad))
#You may wish to tidy your workspace.
rm( covars, fm, gamba_PA, gamba_PO, my.mesh, filenames,
my.biasForm, my.form, my.control, my.mesh, my.mesh.bad)
#You may wish to tidy your workspace.
rm( covars, fm, fm.noRand, gamba_PA, gamba_PO, my.mesh, filenames,
my.biasForm, my.form, my.control, my.mesh, my.mesh.bad)
filenames <- paste0( system.file("extdata", package="RISDM"),
c("/GambaExample_sqrtACC_23Mar28.tif",
"/GambaExample_sqrtDEM_23Mar28.tif",
"/GambaExample_SMRZ_23Mar28.tif"))
covars <- stack( filenames)
names( covars) <- c("ACC","DEM","SMRZ")
print( colnames( coordinates( covars)))  #to see how things are labelled.
plot( covars)
gamba_PO <- readRDS( system.file("extdata", "Gamba_PO_23Mar28.RDS",
package="RISDM"))
gamba_PA <- readRDS( system.file("extdata", "Gamba_PA_23Mar28.RDS",
package="RISDM"))
str( gamba_PO)
str( gamba_PA)
my.mesh <- makeMesh( covars$DEM, max.n=c(1000, 350), dep.range=3, doPlot=FALSE)
checkMesh( my.mesh, my.mesh$hull, ras=covars$DEM)
my.mesh.bad <- makeMesh( covars$DEM, max.n=c(250, 30), dep.range=3, doPlot=FALSE)
checkMesh( my.mesh.bad, my.mesh$hull, ras=covars$DEM)
#linear in SMRZ only
my.form <- ~0+SMRZ
#interacting between SMRZ and DEM
my.form <- ~0+SMRZ*DEM
#a B-spline regression basis with low degrees of freedom
my.form <- ~0+splines::bs(SMRZ, df=3)
#a(n orthogonal) polynomial in SMRZ and DEM
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)
#adding accessibility too (as per paper).
my.form <- ~0+poly(SMRZ,2)+poly(DEM,2)+acc
#intercept only == no heterogeneity in search effort (no sampling bias)
my.biasForm <- 1
#regression spline in acc
my.biasForm <- ~1+splines::bs( acc, df=3)
#linear in acc
my.biasForm <- ~1+acc
#observer differences as a sampling artefact
list( PO=NULL, PA=~1+observer)
#intercept only == no sampling artefact
#               == no heterogeneity within each data type
list( PO=NULL, PA=~1)
fm <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y")))
#the very vague everything
my.control <- list( prior.mean=0, int.sd=1000, other.sd=1000)
#(much) tighter prior for effects
my.control <- list( prior.mean=0, int.sd=1000, other.sd=0.1)
#the default
my.control <- list( prior.mean=0, int.sd=1000, other.sd=10)
fm <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.noRand <- isdm( observationList=list( POdat=gamba_PO,
PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL, PA="PA"),
sampleAreaNames=c( PO=NULL, PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
addRandom=FALSE))
summary( fm)
plot( fm, covarRaster=covars, nFigRow=2, ask=FALSE)
plot( fm.noRand, covarRaster=covars, nFigRow=2, ask=FALSE)
#This is a mock-up only.
#You should use a much(!) larger value of S.
#You will probably want to choose a larger value of n.threads too.
fm$preds <- predict( fm, covarRaster=covars, S=50,
intercept.terms="PA_Intercept", n.threads=1)
plot( fm$preds$mean.field)
#Predicting probability too
fm$preds.probs <- predict( fm, covarRaster=covars,
S=50, intercept.terms="PA_Intercept", n.threads=1,
type="probability")
plot( fm$preds.probs$mean.field)
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO=NULL),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PO=NULL),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO="anything"),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PO=NULL),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO="anything"),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PO=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
library( testthat)
####testing isdm
f <- system.file("external/test.grd", package="raster")
r <- raster::raster(f)
raster::values( r)[ !is.na( raster::values( r))] <- 1
rm( f)
dat <- simulateData.isdm( expected.pop.size=200000, rasterBoundary=r, control=list(doPlot=FALSE))
raster::crs( dat$covarBrick) <- raster::crs( r)
meshy <- makeMesh( dat$covarBrick[[1]], max.n=c(500, 150), dep.range=25, expans.mult=20, offset=500, max.edge=5, doPlot=FALSE)
fm1 <- list()
#with the PO data only using plugin estimates for now.
fm1[[1]] <- isdm( observationList=list( POdat=as.data.frame( dat$PO)),
covarBrick=dat$covarBrick,
mesh=meshy,
responseNames=c( PO="anything"),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+Altitude+Temperature,
biasFormula=~1+dist2City,
artefactFormulas=list( PO=~1),
control=list( int.prec=0.01, other.prec=1,
calcICs=FALSE,
prior.range=c(1000,0.1), prior.space.sigma=c( 2,0.1),
coord.names=c("x","y"),
n.threads=8,
addRandom=TRUE,
DCmethod="TalyorsLinApprox"))
mtrace( isdm)
fm1 <- list()
#with the PO data only using plugin estimates for now.
fm1[[1]] <- isdm( observationList=list( POdat=as.data.frame( dat$PO)),
covarBrick=dat$covarBrick,
mesh=meshy,
responseNames=c( PO="anything"),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+Altitude+Temperature,
biasFormula=~1+dist2City,
artefactFormulas=list( PO=~1),
control=list( int.prec=0.01, other.prec=1,
calcICs=FALSE,
prior.range=c(1000,0.1), prior.space.sigma=c( 2,0.1),
coord.names=c("x","y"),
n.threads=8,
addRandom=TRUE,
DCmethod="TalyorsLinApprox"))
mtrace( uniqueVarNames)
newForm
head( XX)
sampleAreaNames
skip( 40)
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PO="anything"),
sampleAreaNames=c( PO=NULL),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PO=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
debug::skip( 40)
responseNames
debug::skip( 43)
qqq()
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=NULL,
sampleAreaNames=NULL,
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=list( PO=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
newForm
qqq()
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=NULL,
sampleAreaNames=NULL,
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=NULL,
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
newInfo$distForm
newInfo$biasForm
newInfo$arteForm
mtrace( combineFormulae)
length( addTerms)
debug::skip( 11)
mtrace.off()
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
#biasFormula=~1+ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
mtrace( isdm)
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
mtrace( uniqueVarNames)
biasForm
debug::skip( 22)
newBiasForm <- NULL
mtrace( combineFormulae)
forms
jj
qqq()
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
debug::skip(22)
newForm
newBiasForm <- NULL
newInfo$biasForm
debug::skip( 3)
jj
jj <- 3
library( RISDM)
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.PA$preds <- predict( fm.PA, covarRaster=covars, S=50,
intercept.terms="PA_Intercept", n.threads=1)
library( raster)
fm.PA$preds <- predict( fm.PA, covarRaster=covars, S=50,
intercept.terms="PA_Intercept", n.threads=1)
plot( fm.PA$preds$mean.field)
#PO data only
fm.PO <- isdm( observationList=list( POdat=gamba_PO),
covarBrick=covars,
mesh=my.mesh,
responseNames=NULL,
sampleAreaNames=NULL,
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
biasFormula=~1+ACC,
artefactFormulas=NULL,
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.PO$preds <- predict( fm.PO, covarRaster=covars, S=50,
intercept.terms="PO_Intercept", n.threads=1)
plot( fm.PO$preds$mean.field)
#PA data only
fm.PA <- isdm( observationList=list( PAdat=gamba_PA),
covarBrick=covars,
mesh=my.mesh,
responseNames=c( PA="PA"),
sampleAreaNames=c( PA="Area"),
distributionFormula=~0+poly( DEM, 2) + poly( SMRZ,2) + ACC,
artefactFormulas=list( PA=~1),
control=list( coord.names=c("x","y"),
int.sd=1000, other.sd=10, prior.mean=0,
prior.range=c(1,0.1), prior.space.sigma=c( 5,0.1)))
fm.PA$preds <- predict( fm.PA, covarRaster=covars, S=50,
intercept.terms="PA_Intercept")
rm( list=ls())
q()
library( readxl)
cullDat <- as.data.frame( read_excel( path="~/COTS_CCIP/CCIP-D-02/fieldTrip_March23/Data/MarchData2.xlsx", sheet="Cull"))
siteTime <- tapply( cullDat$BottomTime, INDEX=paste( cullDat$Reef, cullDat$CullZone, sep="_"), FUN=sum)
cullDat$COTS.15 <- rowSums( cullDat[,c("No.COTS15-20cm","No.COTS25-40cm","No.COTS>40cm")])
siteCOTS.cull <- tapply( cullDat$COTS.15, INDEX=paste( cullDat$Reef, cullDat$CullZone, sep="_"), FUN=sum)
CPUE.cull <- siteCOTS.cull / siteTime
SDat <- as.data.frame( read_excel( path="~/COTS_CCIP/CCIP-D-02/fieldTrip_March23/Data/MarchData2.xlsx", sheet="SALAD"))
siteTime <- tapply( SDat$ElapsedTIme, paste( SDat$Reef, SDat$Zone, sep="_"), sum)
siteCOTS.salad <- tapply( SDat$No.COTS, paste( SDat$Reef, SDat$Zone, sep="_"), sum)
siteSCARS.salad <- tapply( SDat$No.Scars, paste( SDat$Reef, SDat$Zone, sep="_"), sum)
CPUE.SALAD <- siteCOTS.salad / siteTime
nammy <- union( names( CPUE.cull), names( CPUE.SALAD))
combined.CPUE <- matrix( NA, ncol=5, nrow=length( nammy))
colnames( combined.CPUE) <- c( "CPUE.cull","CPUE.salad","COTS.cull","COTS.salad","Scars.salad")
rownames( combined.CPUE) <- nammy
combined.CPUE[names( CPUE.cull),"CPUE.cull"] <- CPUE.cull
combined.CPUE[names( CPUE.SALAD),"CPUE.salad"] <- CPUE.SALAD
combined.CPUE[names( siteCOTS.cull),"COTS.cull"] <- siteCOTS.cull
combined.CPUE[names( siteCOTS.salad),"COTS.salad"] <- siteCOTS.salad
combined.CPUE[names( siteCOTS.salad),"Scars.salad"] <- siteSCARS.salad
pairs( combined.CPUE, panel=function(x,y,...){ points(x,y,pch=20);abline(0,1, col='red')})
plot( combined.CPUE[,c("COTS.cull", "COTS.salad")])
plot( combined.CPUE[,c("COTS.cull", "COTS.salad")])
abline( 0,1)
